{"remainingRequest":"C:\\Users\\Ray\\WebstormProjects\\vote_app4\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Ray\\WebstormProjects\\vote_app4\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Ray\\WebstormProjects\\vote_app4\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Ray\\WebstormProjects\\vote_app4\\src\\views\\About.vue?vue&type=template&id=039c5b43&scoped=true&","dependencies":[{"path":"C:\\Users\\Ray\\WebstormProjects\\vote_app4\\src\\views\\About.vue","mtime":1577808013653},{"path":"C:\\Users\\Ray\\WebstormProjects\\vote_app4\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Ray\\WebstormProjects\\vote_app4\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Ray\\WebstormProjects\\vote_app4\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Ray\\WebstormProjects\\vote_app4\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}